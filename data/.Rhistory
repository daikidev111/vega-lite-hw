demo()
help()
topi <- "women"
help(topi)
demo()
x <- 5
x <- x + 1
x <- sqrt(x)
x<-c(1, 2, 3, 4, 5, 6)
x<-c(1, 2, 3, 4, 5, 6)
mean(c)
x<-mean(c)
x<-mean(theData)
x<-mean(thedata)
thedata <- c(1, 2, 3, 4, 5, 6)
x <- mean(thedata)
x = sd(thedata)
x = hist(thedata)
x = hist(thedata)
?mpg
library(dplyr)
source("~/Desktop/FIT3152-assignment2/assignment2.R", echo=TRUE)
################################### Libraries ###############################
library(janitor)
library(tidyr)
library(data.table)
library(ggplot2)
library(reshape2)
library(dplyr)
library(lubridate)
library(plotly)
library(GGally)
library(tree)
library(e1071)
package.install("e1071")
package.install(e1071)
install.packages("e1071")
library(e1071)
library(ROCR)
install.packages("ROCR")
library(ROCR)
library(randomForest)
install.packages("randomForest")
library(randomForest)
install.packages("adabag")
library(adabag)
install.packages("rpart")
library(rpart)
install.packages("neuralnet")
# installing/loading the latest installr package:
install.packages("installr"); library(installr)
# install+load installr
updateR() # updating R.
library(quantmod);
names(ECO)
ECO <- read.delim("~/Downloads/ECO.txt")
View(ECO)
library(rugarch);
library(sos);
library(forecast);
install.packages("rugarch", "sos", "forecast", "quantmod", "fBasics");
#install.packages("rugarch", "forecast", "quantmod", "fBasics");
library(rugarch);
library(sos);
library(forecast);
library(quantmod);
require(fBasics);
names(ECO);
attach(ECO)
set.seed(125088)
rets = 100*diff(log(Price)) # Compute the log return
rets = as.ts(rets)
plot(rets, col="blue")
length(rets)
rets
#loop
set.seed(125088)
# load the forecast package as it has auto.arima command
all_smpl = length(rets)
# rets are the log-returns computed from the Bitcoin prices
fixed.smpl = 4485
# for this case a fixed window size is 514
R = all_smpl - fixed.smpl
# R is the number of optimal ARIMA models to be estimated
step = 1L
# the step is one day
arima.fit = list()
for (i in 1:1000) {
arima.fit[[i]] <- auto.arima(rets[(i-step+1):(fixed.smpl+i-step)], ic=c("aicc"),
max.p=3, max.q=3,stepwise = FALSE,allowmean=TRUE)
}
gdp_df <- read_excel("gdp_data.xls")
unemp_df <- read_excel("unemployment.xls")
################################### Libraries ###############################
library(janitor)
library(tidyr)
library(data.table)
library(dplyr)
library(lubridate)
library("readxl")
#install.packages("xlsx")
library("xlsx")
install.packages("xlsx")
install.packages("xlsx")
install.packages("readxl")
################################### Libraries ###############################
library(janitor)
library(tidyr)
library(data.table)
library(dplyr)
library(lubridate)
library("readxl")
#install.packages("readxl")
#install.packages("xlsx")
library("xlsx")
################################### Project Setup ############################
setwd("~/Desktop/vega-lite-hw/data")
rm(list=ls())
glob_temp <- read.csv("GlobalLandTemperaturesByCountry.csv")
glob_temp_path <- "GlobalLandTemperaturesByCountry.csv"
gdp_df <- read_excel("gdp_data.xls")
unemp_df <- read_excel("unemployment.xls")
path_to_write <- "~/Desktop/vega-lite-hw/cleaned-data/"
View(unemp_df)
#### DATA MANIPULATION #####
colnames(gdp_df)[1] = "country"
colnames(unemp_df)[1] = "country"
unemp_df <- unemp_df %>% na.omit(unemp_df)
#### DATA MANIPULATION #####
colnames(gdp_df)[1] = "country"
colnames(unemp_df)[1] = "country"
select(gdp_df, -c(2:30))
gdp_df = select(gdp_df, -c(2:30))
unemp_df = select(unemp_df, -c(2:40))
################################### Project Setup ############################
setwd("~/Desktop/vega-lite-hw/data")
rm(list=ls())
glob_temp <- read.csv("GlobalLandTemperaturesByCountry.csv")
glob_temp_path <- "GlobalLandTemperaturesByCountry.csv"
gdp_df <- read_excel("gdp_data.xls")
unemp_df <- read_excel("unemployment.xls")
path_to_write <- "~/Desktop/vega-lite-hw/cleaned-data/"
########## Data cleansing ###########
glob_temp <- glob_temp %>% clean_names()
glob_temp <- na.omit(glob_temp)
gdp_df <- gdp_df %>% clean_names()
gdp_df <- gdp_df %>% na.omit(gdp_df)
unemp_df <- unemp_df %>% clean_names()
unemp_df <- unemp_df %>% na.omit(unemp_df)
#### DATA MANIPULATION #####
colnames(gdp_df)[1] = "country"
colnames(unemp_df)[1] = "country"
gdp_df = select(gdp_df, -c(2:40))
unemp_df = select(unemp_df, -c(2:40))
gdp_df = select(gdp_df, -c(3:10))
unemp_df = select(unemp_df, -c(3:10))
colnames(gdp_df)[2] = "2019_GDP"
colnames(unemp_df)[2] = "2019_UNEMP"
merge(gdp_df, unemp_df, by = "country")
df = merge(gdp_df, unemp_df, by = "country")
View(df)
gni_df <- read.csv("GNI.csv")
gni_df <- gni_df %>% na.omit(gni_df)
View(gni_df)
colnames(gni_df)[1] = "country"
colnames(gni_df)[2] = "2019_GNI"
df = merge(df, gni_df, by="country")
View(df)
nrow(df)
df[2]
df[3]
df[4]
df[4][i]
df$`2019_GNI`[i]
i
for (i in 1:nrow(df)) {
if (df[4] <= 1085) {
df[4]
} else if (1085 < df[4] <= 4255) {
for (i in 1:nrow(df)) {
if (df[4] <= 1085) {
df[4]
} else if (1085 < df[4] || df[4] <= 4255) {
print("middle")
} else if (4256 <= df[4] < 13205) {
for (i in 1:nrow(df)) {
if (df[4] <= 1085) {
df[4]
} else if (1085 < df[4] || df[4] <= 4255) {
print("middle")
} else if (4256 <= df[4] || df[4] < 13205) {
print("upper middle")
} else if (df[4] >= 13205) {
print("higher")
}
}
for (i in 1:nrow(df)) {
if (df[4] >= 13205) {
print(df[1])
}
}
usewarnings()
for (i in 1:nrow(df)) {
if (df[4] >= 13205) {
print(df[1])
usewarnings()
}
}
usewarnings()
for (i in 1:nrow(df)) {
if (df[4] >= 13205) {
print(df[1])
break
}
}
for (i in 1:nrow(df)) {
if (df[4] >= 13205) {
df[4] = "High Income"
}
}
df['Class'] = "High Income"
for (i in 1:nrow(df)) {
if (df[4] >= 13205) {
df['Class'] = "High Income"
}
}
for (i in 1:nrow(df)) {
if (df$`2019_GNI` >= 13205) {
df['Class'] = "High Income"
}
}
df$`2019_GNI`[i]
for (i in 1:nrow(df)) {
if (df$`2019_GNI`[i] >= 13205) {
df$Class[i] = "High Income"
}
}
for (i in 1:nrow(df)) {
if (df$`2019_GNI`[i] >= 13205) {
df$Class[i] = "High Income"
} else {
df$Class = "None"
}
}
print(df$`2019_GNI`[i])
for (i in 1:nrow(df)) {
print(df$`2019_GNI`[i])
if (df$`2019_GNI`[i] >= 13205) {
df$Class[i] = "High Income"
} else {
df$Class = "None"
}
}
for (i in 1:nrow(df)) {
if (df$`2019_GNI`[i] >= 13205) {
df$Class[i] = "High Income"
} else {
df$Class[i] = "None"
}
}
for (i in 1:nrow(df)) {
if (df$`2019_GNI`[i] >= 13205) {
df$Class[i] = "High Income"
} else if (df$`2019_GNI`[i] <= 1085) {
df$Class[i] = "Low Income"
} else if (df$`2019_GNI`[i] > 1085 && df$`2019_GNI`[i] <= 4255) {
df$Class[i] = "Lower Middle Income"
} else {
df$Class[i] = "Upper Middle Income"
}
}
round(df$`2019_GDP`, 2)
for (i in 1:nrow(df)){
round(df$`2019_GDP`[i], 2)
round(df$`2019_UNEMP`[i], 2)
round(df$`2019_GNI`, 2)
}
for (i in 1:nrow(df)){
df$`2019_GDP`[i] = round(as.numeric(df$`2019_GDP`[i]), 2)
df$`2019_UNEMP`[i] = round(as.numeric(df$`2019_UNEMP`[i]), 2)
df$`2019_GNI`[i] =round(as.numeric(df$`2019_GNI`[i]), 2)
}
for (i in 1:nrow(df)){
df$`2019_GDP`[i] = as.numeric(df$`2019_GDP`[i])
df$`2019_GDP`[i] = round(as.numeric(df$`2019_GDP`[i]), 2)
df$`2019_UNEMP`[i] = round(as.numeric(df$`2019_UNEMP`[i]), 2)
df$`2019_GNI`[i] =round(as.numeric(df$`2019_GNI`[i]), 2)
}
#gdp_df$country[37] = "China"
#gdp_df = gdp_df %>% filter((gdp_df$country == "United States") | (gdp_df$country == "China") | (gdp_df$country == "India") | (gdp_df$country == "United Kingdom") | (gdp_df$country == "Germany") | (gdp_df$country == "Japan") | (gdp_df$country == "France"))
write.csv(df, paste(path_to_write, "economics"), row.names=FALSE)
#gdp_df$country[37] = "China"
#gdp_df = gdp_df %>% filter((gdp_df$country == "United States") | (gdp_df$country == "China") | (gdp_df$country == "India") | (gdp_df$country == "United Kingdom") | (gdp_df$country == "Germany") | (gdp_df$country == "Japan") | (gdp_df$country == "France"))
write.csv(df, paste(path_to_write, "economics.csv"), row.names=FALSE)
